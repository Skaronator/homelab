{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Skaronator Homelab","text":"<p>Warning</p> <p>This documentation is currently under construction and is obviously not comprehensive yet.</p> <p>Welcome to the comprehensive documentation for Skaronator's homelab infrastructure. This documentation covers the complete setup, configuration, and management of a modern Kubernetes-based homelab environment.</p>"},{"location":"#overview","title":"Overview","text":"<p>This homelab is built on a foundation of cloud-native technologies, featuring automated deployments, comprehensive monitoring, and scalable services. The infrastructure is designed to be both educational and practical, serving real-world needs while demonstrating best practices in modern DevOps.</p>"},{"location":"initial-setup/debian/","title":"Setting up Debian (Host OS)","text":""},{"location":"initial-setup/debian/#increasing-default-open-file-and-watch-limit","title":"Increasing default open file and watch limit","text":"<p>Why this is nessecary?</p> <p>Kubernetes environments frequently encounter file handle exhaustion because multiple processes running under the same user need to open numerous files simultaneously and use filesystem watchers (fswatch/inotify) to monitor configuration changes, logs, and resources.</p> <p>The default Debian limits (~1024 file handles, low inotify watchers) are insufficient for Kubernetes clusters where container runtimes, API components, and applications can easily exceed these quotas.</p> <p>These increased limits prevent \"too many open files\" errors and ensure proper filesystem monitoring for Kubernetes controllers and logging systems.</p> <p>Add the following content to the config files</p> /etc/security/limits.conf<pre><code>*       soft    nofile          1048576\n*       hard    nofile          1048576\nroot    soft    nofile          1048576\nroot    hard    nofile          1048576\n</code></pre> /etc/sysctl.conf<pre><code>fs.inotify.max_user_instances = 1280\nfs.inotify.max_user_watches = 10028400\n</code></pre> <p>Run this command after adjusting the config: <code>sysctl -p</code></p> <p>Not sure if I need to modify the following:</p> /etc/systemd/system.conf<pre><code># Below [manager] block!\nDefaultLimitNOFILE=1048576\n</code></pre> /etc/systemd/user.conf<pre><code># Below [manager] block!\nDefaultLimitNOFILE=1048576\n</code></pre>"},{"location":"initial-setup/debian/#increase-zfs-arc-size","title":"Increase ZFS Arc Size","text":"<p>By default Arc size is quite small for my system. I'm on 128 GB and would like to have at least half of that for ZFS.</p> /etc/modprobe.d/zfs.conf<pre><code># Set Max ARC size =&gt; 80 == 85899345920 Bytes\noptions zfs zfs_arc_max=85899345920\n\n# Set Min ARC size =&gt; 64GB == 68719476736\noptions zfs zfs_arc_min=68719476736\n</code></pre> <p>After modifing this file make sure to regenerate the initramfs.</p> <pre><code>$ update-initramfs -u -k all\n</code></pre>"},{"location":"initial-setup/debian/#setting-up-kubernetes","title":"Setting up Kubernetes","text":""},{"location":"initial-setup/debian/#install-the-cluster","title":"Install the cluster","text":"<pre><code>k0sctl apply\nk0sctl kubeconfig &gt; ~/.kube/config\n</code></pre>"},{"location":"initial-setup/debian/#restore-sealed-secret-key","title":"Restore Sealed Secret key","text":"<p>(Restore sealed-secret.yaml from Backup)</p> <pre><code>k apply -f sealed-secret.yaml\n</code></pre>"},{"location":"initial-setup/debian/#install-argocd","title":"Install ArgoCD","text":"<pre><code>cd ops/argocd\nk create ns ops\nk kustomize --enable-helm | k apply -f -\n</code></pre> <p>From now on everything else will be installed / setup by ArgoCD</p>"},{"location":"initial-setup/k0s/","title":"Setting up Kubernetes","text":"<p>Kubernetes can be installed in many different ways. Just like Linux has multiple distributions, so does Kubernetes. I tried several distributions from Ansible Playbooks to Immutable Host systems\u2014they all have their ups and downs.</p> <p>I'm currently using k0s which is similar to k3s, but the out-of-the-box experience is way better suited for my use case.</p>"},{"location":"initial-setup/k0s/#k0sctl-cli","title":"k0sctl CLI","text":"<p>k0s provides a CLI tool that is somewhat similar to OpenTofu and you can run on your PC in order to install, upgrade and backup the k0s cluster running elsewhere.</p> <p>The tool is called k0sctl and can be found on GitHub. Install instructions are on the official homepage.</p>"},{"location":"initial-setup/k0s/#the-k0sctlyaml-config-file","title":"The k0sctl.yaml config file","text":"<p>This file describes your cluster. Here are all the nodes and their associated IPs in this config file. </p> <p>You can either adopt my k0sctl.yaml file or generate your own with this command:</p> <pre><code>k0sctl init &gt; k0sctl.yaml\n</code></pre> <p>After you've adjusted the config to your liking, you can run this command to deploy your cluster:</p> <pre><code>k0sctl apply\nk0sctl kubeconfig &gt; ~/.kube/config\n</code></pre>"},{"location":"initial-setup/k0s/#restore-sealed-secret-key","title":"Restore Sealed Secret key","text":"<p>(Restore sealed-secret.yaml from Backup)</p> <pre><code>k apply -f sealed-secret.yaml\n</code></pre>"},{"location":"initial-setup/k0s/#install-argocd","title":"Install ArgoCD","text":"<pre><code>cd ops/argocd\nk create ns ops\nk kustomize --enable-helm | k apply -f -\n</code></pre> <p>From now on everything else will be installed / setup by ArgoCD</p>"}]}